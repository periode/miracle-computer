Hello,

# THE SCRIPTURE

There is a story at MIT involving computers and magic. In the early days of time-sharing for mainframe computers, graduate students, researchers and faculty all had to use the same, massive computer -in this case, a PDP-1. One day, one of the lab members found a switch, which had two positions. One was “Magic”, the other one was “More Magic”. The switch was set to “More Magic”. Curious, the researcher flipped it to “Magic”, and the whole computer crashed immediately. After setting it back to “More Magic”, he and other colleagues investigated the situation. A single wire connected to one end of the switch to the innards of the machine, the other end of the switch inexplicably left open. There was no rational, immediate explanation for that phenomenon. Content with the use of “More Magic” over just regular “Magic”, they resumed their work and the computer was left untouched until disposed of.

>>> START TO SAY HELLO

>> PRINT THE OUTPUT OF TURING

The original scripture for that manifestation of the computer miracle can be traced back to the Turing paper which, as most papers -only bothered itself with ideals. As a matter of fact, its applied mathematics, as it turned out to be, were quite un-rigorous. But the word was there for the mind, and not for the deed. It offered a theoretical solution to a theoretical problem, and the description of vague guidelines to implement this theory seems to be but an afterthought. The unseen phenomenon here isn't the simple implementation of theories, but the implementation of an all-encompassing theory, destined to solve the Entscheidungsproblem. The Entscheidungsproblem is the decision problem. Can we make a decision, an un-arbitrary, un-ambivalent, a binary decision? The fluidity, the ever-evolving, consuming and forgetful quality of our minds seems to prevent us from doing so. Implement a device to circumvent our the biological limitations of the mind, and you could know all there is to know about prime numbers.
The Turing paper, then is but the newest iteration in our long list of claims for universality. And it was first about the world of numbers.

Turing’s purpose wasn't to have a physical proof of universal decision making, the purpose was to provide mental re-assurance., to KNOW that it was possible to KNOW. That even if we weren't able to hold and manifest that knowledge, we could rely on the fact that there was a system that could. To rely on something better than humans at storing and processing information. Writing words was already storing information, but the processing was yet to come.

So it started just like any other miracle. Recognized only within a community which was already persuaded. All had at least heard of the author at the time, and acknowledged his unusual capacities, and so they took his word for granted, and started building a computing machine. The machine was built according to the word. It would store, process, store, process, store, process, until a given state was reached, and then it would wait, ready to store and process again, one mathematical step after another. The whole range of possible binary operations can be found in what we've come to call a truth table, itself obtained by cross-referencing truth functions with binary input.

>>> what are the truth functions

F
NOR
Xq
¬p
↛
¬q
XOR
NAND
AND
XNOR
q
it/then
p
then/if
OR
T


>>> START THE READ-PROCESS-WRITE CYCLE


#### THE APPLICATION

The mental certainty of the universal truth stemming from Turing's paper was confirmed by the physical implementation of that paper. The computer was prophesied by writings, and announced by the work of Babbage and Lovelace on their Analytical and Differential Engines. As a manifestation, then it was not un-explained, it was only the consecration of thought into matter, of rational thought (science) into rational matter (machine). That explainability, that rationality of the computer did not prevent it from being irrationally worshipped; on the contrary, it is the level at which it remained true to the essence of theoretical sciences' practice that set up its unique position inside the scientific community.
In parallel, the explosion of the western world’s system of values after the second world war left a gaping wound which had to be healed by an alternative -if possible, an alternative far from the biological, moral and subjective failures of human minds. The computing machine did not rely on any of those. It came from the world of ideas, and allowed humans to access it, to query, in search of universal answers and immediate decisions -so far applied to sciences. The cold, explainable nature of gear, tape and reading heads stood in stark and necessary contrast to the heated matter of a global conflict. Point in case, the apex of that heat, the atom bomb, was tolerated as a proof of science's power, as the closing act of human excess.
And still, the perfect logic behind both the bomb and the computer, beheld by the greater public, still remained in the heads of a few clergymen, scattered between universities in the United States. To know how to work the machine is to have at one's hands the ability to know for certain, to find an answer and a truth as the output of successive steps of read, process, write.

>>> START THE ADDITION OF JUST DIGIT + OPERATOR + DIGIT

Science, as all religions, sees itself as a vehicle for the betterment of mankind, and that which is not represented through graspable form cannot prosper. From tape and head, then, we moved to magnetism and vacuum tubes, and as the hardware became easier and more efficient, we tried to make its manipulation easier and more efficient. Graduate students started working towards a way to mitigate the undesirable side-effects of a machine -that is, its inability to understand us. They started to abandoned machine code, the faithful mirror of electronic circuits and built compilers in a language called Assembly. A compiler is something of a translator, if you will. It’s a piece of code that takes a language and transforms it into another language, until it reaches its original state of electrical signals. If we were to solve our problems, if we were to ask the machine for what decisions to make, we had to renegotiate the terms of understanding. Retaining the physical certainty of cogs, tubes and circuits -and, through miniaturization, optimizing that certainty-, we started working on abstraction.
It was decided that the variations in voltage current would be represented by two numbers, 0 and 1, a binary digit, a bit. So plus became 111001111101011100010.

>>> START THE ADDITION OF JUST BINARY + OPERATOR + BINARY

It wasn't too much of a conceptual leap to represent numbers as other numbers, combining them into supersets of bits, which were standardized as bytes. The basic mathematical operations needed for the machine to reach a decision, however, could not be represented as a single number. While existing in purely logical terms, they had to be referred to in human terms. It is through language that the universal machine truly stepped into our world. Some of us agreed that ADD would be represented as numbers, that a word, an idea, a relation, would be boiled down -and some would say reduced- to a set of numbers. In that case, 111001111101011100010 became : ADD.

>>> START THE ADDITION OF JUST WORD + WORD + WORD


#### THE OOP

With that switch came a new beginning, and as with all beginnings was a new word. The manifestation of new words, new ways to communicate to that machine, announced the dawn of a renewed computing miracle. Beyond the reaches of a strictly mathematical depiction of the word, we thrived towards a representation system which could, beyond simple semantics gymnastics, loop back on its represented system and modify it.
The main shift behind that commitment was the shift between procedural programming and imperative programming -and more precisely what is referred to as object-oriented programming in which we replaced numbers by data structures.

???

Mathematical expressions became statements, statements implied states, enabled -or restrained, depending who you ask- by the desire to retain a somewhat shadow of the mechanical architecture behind the whole process. ADD could still be traced back to its binary digit equivalent. A short-hand, but with long-reaching consequences, happened with the implementation of Boolean logic into the inner workings of our computings. The equality, or the inequality of a given mathematical expression, of an ideological wording, could be assessed as being TRUE or FALSE, and the binary encoding of our system took a life of its own, standing on the shoulders of manichaenism.

>>> START NEW OBJECT
>>> ADD PROPERTIES AT REGULAR INTERVALS
>>> NEW METHODS AT REGULAR INTERVALS

Object-Oriented programming, on the other hand, allowed us to write instructions which related to our world, and to the mental model we had of it. It allowed us to recombine the building blocks of the Turing paper. It allows to create, describe and act upon clusters of data. Naming that data -those chunks of digital clay that were to form the golem of our world- came from an endeavor to relieve programmers from the mental somersaults of describing what was around us. This act of naming resulted in a manipulable, processable representation of our world. From making decisions with, and about numbers, we ended up making decisions with numbers about our physical, non-discreet environment.

>>>> CREATE NEW HUMAN

This is how we made the machine, if not understand, at least act upon the mental representation of the world that computer programmers lived in. Turning language into numbers, we enabled what was first a blessing for a small, knowledgeable community to be bestowed upon the rest of our peers by allowing to make decisions about our behaviours, and then act upon these decisions. If we could reorganize a word into bits, and bits into bytes and if those bytes could mean anything, then it follows from the cartesian method that we could abstract anything. As Georg Nees tells it, during the first exhibition of Computer Art (that is, graphical computed output for its own sake), a computer could indeed, draw like a human draw, if and only if one could explain to the computer how to do it. It is then that we started the task of explaining, one after the other, all the things we needed. From mathematical operands to letters, then words, then colors.

>>>> DEFINE RED

A machine doesn't define red as being the color of blood, it defines red as being a value of 255, 0, 0, passed from the central processing unit to the graphical display device at one particular coordinate. We can then place those values within a greater data structure, naming it “red”, tagging it with “blood, love, happiness, danger”, all weighted against each other.

>>> PRINT RED EVERYWHERE

The more elaborate the data we gave it, the longer Turing's tape had to become. We moved from magnetic ribbons to databases hosted in server farms, with entry fields in every columns, people in every row, with numbers, in steady increments of 1, as ornaments in the margin.



#### THE DEATH OF MIRACLES

The promise of solving the decision problem was too beautiful not to try to fulfill. At this point -at our point-, everything we can think of, everything we can effectively represent in semantic terms became computable. We could give the computer instructions -such as the best way to do this, or to do that, provide the "this" or the "that", and make sure that “this” or “that” was computable. Because everything is a word, and because all words are understood by the computer, then everything is computable. We can represent a problem, and ask it for a solution, and modify the instructions until we reach a conclusion which fits the worldview of the person who wrote the program or that of the person who pays the person who wrote the program.

>>>> START THE GAME OF LIFE

In 1970, John Conway came up with the game of life, and the 0s and 1s performed as life or death. The arbitrary number of neighbors were the sole arbiters in the existence of each cell, and that toy, a the toy which decided, on its own, better and faster than any of us, who would live and who would die, that toy was taken seriously by those who did not know, or those who replaced thought with belief.
The power of process started acting upon us. The end justified the means, and the political took over. Quantitative decision making overpowered the social sciences and, ultimately, the social. Data input, process and output wasn't anymore about floating point numbers, it was about our life expectancies, career paths, happiness levels and language literacies, represented on any scale. Because any scale can be normalized, be represented between 0 and 1, decided upon. Field studies were converted into charts, interviews were analyzed for frequency of utterances, emotions are transmitted through heart-rate sensors, encephalograms and other sorts of biological potentiometers. Conway's game of life paved the way for other games of life, less mathematical and more deadly. Tenure-tracks were sustained by articles published on the computer models of civil violence. Promoters and urban planners played around simulations to fix low-income housing problems. Private companies wrote instructions for the computer -a decision-making machine- to inform a judge -a decision-making human- whether another human, described through a limited set of words, entered in arbitrary databases, transformed into code and compiled into binary, dualistic electrical signals, whether that human was more likely to commit a crime against his peers. The computer decided that some humans were more likely than others to commit crimes in the future, and we correlated these humans as low-income citizens of color. It was describing the world in the words of the man who had made it.


>>>> START ELIZA

In 1966, Joseph Weizenbaum, one of those who knew how the machine worked, that it was limited, and perhaps limiting, expressed academic interest in modeling human conversation. His set of instructions was a back-and-forth between machine language and human language, representing decisions made by carefully, yet vaguely worded phrases. Upon completion, he referred to it as a parody. His assistant, however, referred to it as an interlocutor. It was something to talk to, for lack of a better someone. The instructions, as it became clear to anyone, quickly showed cracks, repetitions and lack of understanding. It is possible to see it as a machine, as an elaborate system of rare earth metals with laser-cut integrated circuits, and yet we choose to see it as more than the sum of its parts.



#### THE LAST MIRACLE

???

What happens when we translate our limited expression of all of that which surrounds us into the subjective objectivity of our mechanical decision-maker. The supervisor of our present and forecaster of our future is well on its way to explain our past -as digital humanities flourish in our universities. What happens, then, is what happened with all other miracles. They invalidate the possibility of anything else. Whatever happens, might happen, or might have happened, is now explainable by the computer. Its supremacy happens not through the automated computation of numbers, but through the automated computation of love, hope, health and happiness. It happens in our inability to understand how it works, and our willingness to relinquish our complexity -down to the very theoretical models of our brain and beliefs- to step into the machine's comfort zone.
The retort to that dynamic of quantizing the world, then, could be found in our ability to provide another cosmogony. While the advent of those machines and their ubiquity in our daily lives have become a delightful small-talk springboard, the technology itself is not to blame. The sacred texts on which relied the religions of the past are not to blame, and our Turing machines is but a very elaborate assortment of minerals, most likely assembled in the People's Republic of China by underpaid laborers.
There was no magic in the authority of the Church, there was no magic in the neo-liberal free-market, and there is no magic in the computer. This does not prevent us from being excessively attached to those belief systems, but our emotional binding to numbers is precisely what prevents us from moving past a paradigm of accumulation. Who, then, is to blame for the systematic reduction of living from a continuous stream to a series of discrete pulses?
We, our ignorance and our illiteracy are the ones to blame. Framing it as a  lack of understanding is still blaming the system for being over-complicated -I don't see it as a lack of understanding, I see it as a lack of effort. The word of God was written by men, men who set up the Catholic Church to serve their vision and impose it on the world. Every single piece of software is also written by men, men who seem to aim towards god-like omnipotence. Specifically, those words that we feed our modern God are written by over-paid males in the Bay Area. If they can construct it, we can break it down. Gutenberg invented the printed press to spread the word of the church, and Luther seized it to question it. If we will forever remain unable to understand ourselves, then maybe we should at least be able to understand what we made.
